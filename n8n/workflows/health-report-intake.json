{
  "name": "Health Report Intake Pipeline",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "health-report-intake",
        "responseMode": "responseNode"
      },
      "id": "webhook-trigger",
      "name": "Health Report Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [240, 300],
      "webhookId": "health-report-intake"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "validate-upload",
      "name": "Validate Upload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300],
      "code": "// Validate health report upload\nconst upload = $input.first().json;\n\n// Check required fields\nif (!upload.userId || !upload.reportFile) {\n  throw new Error('Missing required fields: userId or reportFile');\n}\n\n// Validate file type\nconst allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'];\nif (!allowedTypes.includes(upload.fileType)) {\n  throw new Error('Invalid file type. Only JPEG, PNG, and PDF files are allowed.');\n}\n\n// Check file size (max 10MB)\nif (upload.fileSize > 10 * 1024 * 1024) {\n  throw new Error('File too large. Maximum size is 10MB.');\n}\n\n// Generate unique processing ID\nconst processingId = `hr_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\nreturn {\n  ...upload,\n  processingId,\n  timestamp: new Date().toISOString(),\n  status: 'validated'\n};"
    },
    {
      "parameters": {
        "url": "={{$env.OCR_SERVICE_URL}}/extract",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "reportFile",
              "value": "={{$json.reportFile}}"
            },
            {
              "name": "processingId", 
              "value": "={{$json.processingId}}"
            },
            {
              "name": "extractionType",
              "value": "health_report"
            }
          ]
        },
        "options": {}
      },
      "id": "ocr-extraction",
      "name": "OCR Text Extraction",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300],
      "credentials": {
        "httpBearerAuth": {
          "id": "ocr-service-token",
          "name": "OCR Service Token"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "phi-redaction",
      "name": "PHI Redaction",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 300],
      "code": "// Redact PHI/PII from extracted text\nconst extractedData = $input.first().json;\nlet text = extractedData.extractedText || '';\n\n// PHI redaction patterns\nconst phiPatterns = [\n  // Phone numbers\n  { pattern: /\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/g, replacement: '[PHONE_REDACTED]' },\n  // Email addresses\n  { pattern: /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g, replacement: '[EMAIL_REDACTED]' },\n  // Aadhar numbers (12 digits)\n  { pattern: /\\b\\d{4}\\s?\\d{4}\\s?\\d{4}\\b/g, replacement: '[AADHAR_REDACTED]' },\n  // PAN numbers\n  { pattern: /\\b[A-Z]{5}\\d{4}[A-Z]\\b/g, replacement: '[PAN_REDACTED]' },\n  // Full names (simple pattern)\n  { pattern: /\\b[A-Z][a-z]+\\s+[A-Z][a-z]+\\b/g, replacement: '[NAME_REDACTED]' }\n];\n\n// Apply redaction\nlet redactedText = text;\nlet redactionLog = [];\n\nphiPatterns.forEach(({ pattern, replacement }) => {\n  const matches = text.match(pattern);\n  if (matches) {\n    redactionLog.push({ pattern: pattern.toString(), matches: matches.length });\n    redactedText = redactedText.replace(pattern, replacement);\n  }\n});\n\nreturn {\n  ...extractedData,\n  originalText: text,\n  redactedText: redactedText,\n  redactionLog: redactionLog,\n  redactionTimestamp: new Date().toISOString()\n};"
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/ai-routing/route",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "requestType",
              "value": "health_report_analysis"
            },
            {
              "name": "content",
              "value": "={{$json.redactedText}}"
            },
            {
              "name": "userId",
              "value": "={{$('Validate Upload').first().json.userId}}"
            },
            {
              "name": "level",
              "value": "1"
            },
            {
              "name": "requiresHighAccuracy",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "structured-extraction",
      "name": "L1 AI Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 300],
      "credentials": {
        "httpBearerAuth": {
          "id": "api-token",
          "name": "API Token"
        }
      }
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/health-reports",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userId",
              "value": "={{$('Validate Upload').first().json.userId}}"
            },
            {
              "name": "processingId",
              "value": "={{$('Validate Upload').first().json.processingId}}"
            },
            {
              "name": "originalText",
              "value": "={{$('PHI Redaction').first().json.originalText}}"
            },
            {
              "name": "redactedText",
              "value": "={{$('PHI Redaction').first().json.redactedText}}"
            },
            {
              "name": "structuredData",
              "value": "={{$json.analysisResult}}"
            },
            {
              "name": "redactionLog",
              "value": "={{$('PHI Redaction').first().json.redactionLog}}"
            },
            {
              "name": "confidence",
              "value": "={{$json.confidence}}"
            },
            {
              "name": "status",
              "value": "processed"
            }
          ]
        },
        "options": {}
      },
      "id": "store-report",
      "name": "Store Health Report",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 300],
      "credentials": {
        "httpBearerAuth": {
          "id": "api-token",
          "name": "API Token"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "generate-summary",
      "name": "Generate Summary",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 300],
      "code": "// Generate user-friendly summary\nconst reportData = $input.first().json;\nconst analysisResult = $('L1 AI Analysis').first().json.analysisResult;\n\n// Extract key findings\nconst keyFindings = {\n  criticalAlerts: analysisResult.criticalAlerts || [],\n  keyMetrics: analysisResult.keyMetrics || {},\n  recommendations: analysisResult.recommendations || [],\n  followUpRequired: analysisResult.followUpRequired || false\n};\n\n// Generate summary text\nconst summary = {\n  processingId: $('Validate Upload').first().json.processingId,\n  userId: $('Validate Upload').first().json.userId,\n  processed: true,\n  summary: keyFindings,\n  processingTime: Date.now() - new Date($('Validate Upload').first().json.timestamp).getTime(),\n  timestamp: new Date().toISOString()\n};\n\n// Check for physician red-flag conditions\nif (keyFindings.criticalAlerts.length > 0) {\n  summary.requiresPhysicianReview = true;\n  summary.criticalAlerts = keyFindings.criticalAlerts;\n}\n\nreturn summary;"
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/notifications/send",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "userId",
              "value": "={{$('Generate Summary').first().json.userId}}"
            },
            {
              "name": "type",
              "value": "health_report_processed"
            },
            {
              "name": "title",
              "value": "Health Report Analysis Complete"
            },
            {
              "name": "message",
              "value": "Your health report has been analyzed. {{$('Generate Summary').first().json.requiresPhysicianReview ? 'Important findings require physician review.' : 'Review your personalized recommendations.'}}"
            },
            {
              "name": "priority",
              "value": "={{$('Generate Summary').first().json.requiresPhysicianReview ? 'high' : 'normal'}}"
            },
            {
              "name": "data",
              "value": "={{$('Generate Summary').first().json}}"
            }
          ]
        },
        "options": {}
      },
      "id": "notify-user",
      "name": "Notify User",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1780, 300],
      "credentials": {
        "httpBearerAuth": {
          "id": "api-token",
          "name": "API Token"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300]
    }
  ],
  "pinData": {},
  "connections": {
    "Health Report Upload": {
      "main": [
        [
          {
            "node": "Validate Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Upload": {
      "main": [
        [
          {
            "node": "OCR Text Extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OCR Text Extraction": {
      "main": [
        [
          {
            "node": "PHI Redaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PHI Redaction": {
      "main": [
        [
          {
            "node": "L1 AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "L1 AI Analysis": {
      "main": [
        [
          {
            "node": "Store Health Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Health Report": {
      "main": [
        [
          {
            "node": "Generate Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Summary": {
      "main": [
        [
          {
            "node": "Notify User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notify User": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "health-report-intake-workflow",
  "tags": ["health-reports", "ocr", "phi-redaction", "ai-analysis"]
}