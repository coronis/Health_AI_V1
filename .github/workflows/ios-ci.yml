name: iOS CI/CD

on:
  pull_request:
    paths:
      - 'apps/mobile/ios/**'
      - 'ios/**'
      - '**/ios/**'
      - '**/*.xcodeproj/**'
      - '**/*.xcworkspace/**'
      - '**/Podfile*'
      - '.github/workflows/ios-ci.yml'
  push:
    branches: [main, develop]
    paths:
      - 'apps/mobile/ios/**'
      - 'ios/**'
      - '**/ios/**'
      - '**/*.xcodeproj/**'
      - '**/*.xcworkspace/**'
      - '**/Podfile*'

jobs:
  lint-test-analysis:
    name: Lint, Test & Analysis
    runs-on: macos-latest
    # Only run if iOS project files exist AND the IOS_CI_ENABLED variable is set to true
    if: ${{ (hashFiles('**/*.xcodeproj/**', '**/*.xcworkspace/**', 'apps/mobile/ios/**/*.xcodeproj/**', 'apps/mobile/ios/**/*.xcworkspace/**', 'ios/**/*.xcodeproj/**', 'ios/**/*.xcworkspace/**') != '') && (vars.IOS_CI_ENABLED == 'true') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ~/.cocoapods
            **/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods dependencies
        run: |
          if [ -f "./ios/Podfile" ]; then
            cd ios && pod install --repo-update
          elif [ -f "./apps/mobile/ios/Podfile" ]; then
            cd apps/mobile/ios && pod install --repo-update
          elif find . -name "Podfile" -type f | head -1 | xargs dirname | xargs -I {} sh -c 'cd {} && pod install --repo-update'; then
            echo "Installed pods"
          else
            echo "No Podfile found, skipping CocoaPods installation"
          fi

      - name: Discover iOS project and scheme
        id: discover
        run: |
          # Find .xcworkspace or .xcodeproj files
          WORKSPACE=$(find . -name "*.xcworkspace" -type d | head -1)
          PROJECT=$(find . -name "*.xcodeproj" -type d | head -1)
          
          if [ -n "$WORKSPACE" ]; then
            echo "project_path=$WORKSPACE" >> $GITHUB_OUTPUT
            echo "project_type=workspace" >> $GITHUB_OUTPUT
            # Extract scheme name from workspace
            SCHEME=$(basename "$WORKSPACE" .xcworkspace)
            echo "scheme=$SCHEME" >> $GITHUB_OUTPUT
          elif [ -n "$PROJECT" ]; then
            echo "project_path=$PROJECT" >> $GITHUB_OUTPUT
            echo "project_type=project" >> $GITHUB_OUTPUT
            # Extract scheme name from project
            SCHEME=$(basename "$PROJECT" .xcodeproj)
            echo "scheme=$SCHEME" >> $GITHUB_OUTPUT
          else
            echo "No iOS project found"
            exit 1
          fi
          
          echo "Found iOS ${{ project_type }}: ${{ project_path }}"
          echo "Using scheme: ${{ scheme }}"

      - name: List available schemes
        run: |
          if [ "${{ steps.discover.outputs.project_type }}" = "workspace" ]; then
            xcodebuild -workspace "${{ steps.discover.outputs.project_path }}" -list
          else
            xcodebuild -project "${{ steps.discover.outputs.project_path }}" -list
          fi

      - name: Build and Test
        run: |
          if [ "${{ steps.discover.outputs.project_type }}" = "workspace" ]; then
            xcodebuild \
              -workspace "${{ steps.discover.outputs.project_path }}" \
              -scheme "${{ steps.discover.outputs.scheme }}" \
              -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
              clean build test \
              -resultBundlePath TestResults.xcresult || echo "Tests completed with some failures"
          else
            xcodebuild \
              -project "${{ steps.discover.outputs.project_path }}" \
              -scheme "${{ steps.discover.outputs.scheme }}" \
              -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
              clean build test \
              -resultBundlePath TestResults.xcresult || echo "Tests completed with some failures"
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-results
          path: TestResults.xcresult
          retention-days: 7

  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    # Only run if iOS project files exist AND the IOS_CI_ENABLED variable is set to true
    if: ${{ (hashFiles('**/*.xcodeproj/**', '**/*.xcworkspace/**', 'apps/mobile/ios/**/*.xcodeproj/**', 'apps/mobile/ios/**/*.xcworkspace/**', 'ios/**/*.xcodeproj/**', 'ios/**/*.xcworkspace/**') != '') && (vars.IOS_CI_ENABLED == 'true') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: '0'  # Don't fail the job on vulnerabilities

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-ios'