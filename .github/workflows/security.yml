name: Security Scans

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  secret-scan:
    name: Secret Scanning (gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Gitleaks
        run: |
          echo "Installing Gitleaks..."
          # Try to download with retries
          for i in {1..3}; do
            if wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz; then
              echo "Downloaded Gitleaks successfully"
              break
            else
              echo "Download attempt $i failed, retrying..."
              sleep 2
            fi
          done

          # Verify download and extract
          if [ -f gitleaks.tar.gz ]; then
            tar -xzf gitleaks.tar.gz
            if [ -f gitleaks ]; then
              sudo mv gitleaks /usr/local/bin/
              echo "Gitleaks installed successfully"
            else
              echo "Failed to extract gitleaks binary"
              exit 1
            fi
          else
            echo "Failed to download gitleaks after 3 attempts"
            exit 1
          fi

      - name: Run Gitleaks
        shell: bash
        run: |
          if command -v gitleaks >/dev/null 2>&1; then
            CFG=""
            if [ -f ".gitleaks.toml" ]; then
              CFG="--config .gitleaks.toml"
            fi
            echo "Running gitleaks scan..."
            gitleaks detect --source . $CFG --report-format json --report-path gitleaks-report.json || {
              echo "Gitleaks scan completed with findings or errors"
              # Don't fail the workflow for gitleaks findings
              exit 0
            }
          else
            echo "Gitleaks not available, skipping scan"
          fi

      - name: Upload Gitleaks results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 30

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8.15.0'

      - name: Get pnpm store directory
        shell: bash
        run: |
          if command -v pnpm >/dev/null 2>&1; then
            STORE_PATH=$(pnpm store path --silent 2>/dev/null) || STORE_PATH=".pnpm-store"
          else
            STORE_PATH=".pnpm-store"
          fi
          echo "STORE_PATH=$STORE_PATH" >> $GITHUB_ENV

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies (workspace)
        run: pnpm -w install --frozen-lockfile

      - name: pnpm audit (non-failing)
        run: pnpm audit --json > pnpm-audit.json || true

      - name: Upload pnpm audit results
        uses: actions/upload-artifact@v4
        with:
          name: pnpm-audit
          path: pnpm-audit.json
          retention-days: 30

      - name: Install Snyk
        run: npm install -g snyk

      - name: Authenticate Snyk
        if: ${{ secrets.SNYK_TOKEN }}
        run: snyk auth "${{ secrets.SNYK_TOKEN }}"

      - name: Run Snyk test
        if: ${{ secrets.SNYK_TOKEN }}
        run: snyk test --all-projects --json > snyk-report.json || true

      - name: Upload Snyk results
        if: ${{ secrets.SNYK_TOKEN }}
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.json
          retention-days: 30

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8.15.0'

      - name: Install dependencies (workspace)
        run: pnpm -w install --frozen-lockfile

      - name: Build for analysis (non-failing if missing)
        run: pnpm -r --if-present build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}'

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image (if Dockerfile exists)
        run: |
          if [ -f "services/backend/Dockerfile" ]; then
            docker build -t healthcoachai-backend:latest services/backend/
            echo "BUILT=1" >> $GITHUB_ENV
          else
            echo "BUILT=0" >> $GITHUB_ENV
          fi

      - name: Install Trivy
        run: |
          echo "Installing Trivy..."
          sudo apt-get update || { echo "apt-get update failed"; exit 1; }
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release || { echo "Failed to install dependencies"; exit 1; }

          # Try to add Trivy repository with retries
          for i in {1..3}; do
            if wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -; then
              echo "Added Trivy public key successfully"
              break
            else
              echo "Failed to add Trivy public key, attempt $i/3"
              sleep 2
            fi
          done

          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update || { echo "Failed to update package list after adding Trivy repo"; exit 1; }
          sudo apt-get install -y trivy || { echo "Failed to install Trivy"; exit 1; }

      - name: Run Trivy vulnerability scanner
        if: env.BUILT == '1'
        run: trivy image --format json --output trivy-report.json healthcoachai-backend:latest || true

      - name: Upload Trivy results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30

  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tfsec
        run: |
          wget -O tfsec https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/

      - name: Run tfsec
        run: |
          if [ -d "infra" ]; then
            tfsec infra/ --format json --out tfsec-report.json || true
          else
            echo "No infra/ directory; skipping tfsec."
          fi

      - name: Upload tfsec results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-report
          path: tfsec-report.json
          retention-days: 30

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, codeql, docker-security, infrastructure-security]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md

          if [ -f "artifacts/gitleaks-report/gitleaks-report.json" ]; then
            echo "⚠️ **Secret Scan**: Issues found - check gitleaks-report artifact" >> security-summary.md
          else
            echo "✅ **Secret Scan**: No secrets detected" >> security-summary.md
          fi

          if [ -f "artifacts/pnpm-audit/pnpm-audit.json" ]; then
            echo "⚠️ **Dependency Scan**: Check pnpm-audit artifact for details" >> security-summary.md
          else
            echo "✅ **Dependency Scan**: No critical vulnerabilities found" >> security-summary.md
          fi

          echo "✅ **CodeQL**: Analysis completed" >> security-summary.md

          if [ -f "artifacts/snyk-report/snyk-report.json" ]; then
            echo "✅ **Snyk**: Report generated" >> security-summary.md
          fi

          if [ -f "artifacts/trivy-report/trivy-report.json" ]; then
            echo "✅ **Container Scan**: Analysis completed" >> security-summary.md
          fi

          if [ -f "artifacts/tfsec-report/tfsec-report.json" ]; then
            echo "✅ **Infrastructure Scan**: Analysis completed" >> security-summary.md
          fi

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30
