name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload GitLeaks results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: results.json

  dependency-scanning:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate --json > audit-results.json || true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-results.json

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            audit-results.json
            snyk-results.json

  sast-scanning:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:typescript"

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
            p/nodejs
            p/react
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep.json

  container-scanning:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/backend
          load: true
          tags: healthcoachai/backend:security-scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'healthcoachai/backend:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Anchore Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: 'healthcoachai/backend:security-scan'
          fail-build: false
          severity-cutoff: 'medium'

      - name: Upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.grype-scan.outputs.sarif }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: 'healthcoachai/backend:security-scan'
          format: 'spdx-json'
          output-file: 'sbom.spdx.json'

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  infrastructure-scanning:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,kubernetes,dockerfile,secrets
          output_format: sarif
          output_file_path: checkov-results.sarif
          quiet: true
          soft_fail: true

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: './infra/terraform'
          format: 'sarif'
          sarif_file: 'tfsec-results.sarif'

      - name: Upload tfsec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif

  api-security-testing:
    name: API Security Testing
    runs-on: ubuntu-latest
    needs: [dependency-scanning]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: healthcoachai
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: healthcoachai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create backend env file
        run: |
          cat > services/backend/.env << EOF
          NODE_ENV=test
          PORT=3000
          DATABASE_URL=postgresql://healthcoachai:testpassword@localhost:5432/healthcoachai_test
          REDIS_URL=redis://localhost:6379
          JWT_SECRET=test-secret-key-for-security-testing
          ENCRYPTION_KEY=test-encryption-key-32-characters
          EOF

      - name: Start backend service
        run: |
          cd services/backend
          pnpm build
          pnpm start:prod &
          sleep 30
        env:
          NODE_ENV: test

      - name: Wait for service to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

      - name: Run OWASP ZAP API scan
        uses: zaproxy/action-api-scan@v0.5.0
        with:
          target: 'http://localhost:3000'
          format: 'openapi'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-api-scan-results
          path: |
            report_html.html
            report_json.json

  mobile-security-scan:
    name: Mobile Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install MobSF CLI
        run: |
          pip3 install mobsf-cli

      - name: Scan iOS project
        run: |
          if [ -d "apps/mobile/ios" ]; then
            mobsf-cli scan --source apps/mobile/ios --type ios --format json --output ios-security-report.json || true
          fi

      - name: Scan Android project
        run: |
          if [ -d "apps/mobile/android" ]; then
            mobsf-cli scan --source apps/mobile/android --type android --format json --output android-security-report.json || true
          fi

      - name: Upload mobile security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-security-reports
          path: |
            ios-security-report.json
            android-security-report.json

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [secret-scanning, dependency-scanning, sast-scanning, container-scanning, infrastructure-scanning]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md
          
          if [ -f "gitleaks-report/results.json" ]; then
            echo "❌ **Secret Detection**: Issues found" >> security-summary.md
          else
            echo "✅ **Secret Detection**: No issues found" >> security-summary.md
          fi
          
          echo "📊 **Dependency Scan**: Check artifacts for details" >> security-summary.md
          echo "🔍 **SAST Scan**: Check Security tab for results" >> security-summary.md
          echo "🐳 **Container Scan**: Check Security tab for results" >> security-summary.md
          echo "🏗️ **Infrastructure Scan**: Check Security tab for results" >> security-summary.md
          
          echo "" >> security-summary.md
          echo "Generated on: $(date)" >> security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

  notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_SECURITY }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_SECURITY }}