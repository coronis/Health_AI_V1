name: Security Scans

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Gitleaks
        run: |
          wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks
        run: gitleaks detect --source . --config .gitleaks.toml --report-format json --report-path gitleaks-report.json

      - name: Upload Gitleaks results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 30

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8.15.0'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: pnpm audit --audit-level moderate

      - name: Install Snyk
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        if: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk test
        run: snyk test --all-projects --json > snyk-report.json || true
        if: ${{ secrets.SNYK_TOKEN }}

      - name: Upload Snyk results
        uses: actions/upload-artifact@v3
        if: ${{ secrets.SNYK_TOKEN }}
        with:
          name: snyk-report
          path: snyk-report.json
          retention-days: 30

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8.15.0'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for analysis
        run: pnpm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: '/language:${{matrix.language}}'

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image (if Dockerfile exists)
        run: |
          if [ -f "services/backend/Dockerfile" ]; then
            docker build -t healthcoachai-backend:latest services/backend/
          fi

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy vulnerability scanner
        run: |
          if docker images healthcoachai-backend:latest > /dev/null 2>&1; then
            trivy image --format json --output trivy-report.json healthcoachai-backend:latest
          fi

      - name: Upload Trivy results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30

  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tfsec
        run: |
          wget -O tfsec https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/

      - name: Run tfsec
        run: |
          if [ -d "infra" ]; then
            tfsec infra/ --format json --out tfsec-report.json || true
          fi

      - name: Upload tfsec results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: tfsec-report
          path: tfsec-report.json
          retention-days: 30

  security-report:
    name: Security Report Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, dependency-scan, codeql, docker-security, infrastructure-security]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md

          if [ -f "gitleaks-report/gitleaks-report.json" ]; then
            echo "⚠️ **Secret Scan**: Issues found - check gitleaks-report artifact" >> security-summary.md
          else
            echo "✅ **Secret Scan**: No secrets detected" >> security-summary.md
          fi

          if [ -f "snyk-report/snyk-report.json" ]; then
            echo "⚠️ **Dependency Scan**: Check snyk-report artifact for details" >> security-summary.md
          else
            echo "✅ **Dependency Scan**: No critical vulnerabilities found" >> security-summary.md
          fi

          echo "✅ **CodeQL**: Analysis completed" >> security-summary.md

          if [ -f "trivy-report/trivy-report.json" ]; then
            echo "✅ **Container Scan**: Analysis completed" >> security-summary.md
          fi

          if [ -f "tfsec-report/tfsec-report.json" ]; then
            echo "✅ **Infrastructure Scan**: Analysis completed" >> security-summary.md
          fi

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md
          retention-days: 30
