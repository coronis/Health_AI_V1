name: iOS CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/mobile/ios/**'
      - 'apps/mobile/shared/**'
      - 'packages/design-tokens/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/mobile/ios/**'
      - 'apps/mobile/shared/**'
      - 'packages/design-tokens/**'

env:
  XCODE_VERSION: '15.2'
  IOS_SIMULATOR: 'iPhone 15 Pro'
  IOS_VERSION: '17.2'

jobs:
  lint-and-test:
    name: Lint, Test & Analysis
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

      - name: Cache SPM packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}

      - name: Install SwiftLint
        run: |
          brew install swiftlint

      - name: Setup design tokens
        run: |
          cd packages/design-tokens
          npm install
          npm run build:ios

      - name: Copy design tokens to iOS project
        run: |
          cp -r packages/design-tokens/dist/ios/* apps/mobile/ios/HealthCoachAI/Resources/DesignTokens/

      - name: Create iOS env file
        run: |
          cat > apps/mobile/ios/.env << EOF
          API_BASE_URL=https://api-staging.healthcoachai.com
          FEATURE_FLAGS=chat,photo_log
          ENV=staging
          SENTRY_DSN=${{ secrets.SENTRY_DSN_IOS }}
          EOF

      - name: Lint Swift code
        run: |
          cd apps/mobile/ios
          swiftlint lint --reporter github-actions-logging

      - name: Build project
        run: |
          cd apps/mobile/ios
          xcodebuild clean build \
            -project HealthCoachAI.xcodeproj \
            -scheme HealthCoachAI \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
            -configuration Debug \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=NO

      - name: Run unit tests
        run: |
          cd apps/mobile/ios
          xcodebuild test \
            -project HealthCoachAI.xcodeproj \
            -scheme HealthCoachAI \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
            -configuration Debug \
            -resultBundlePath TestResults.xcresult \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      - name: Generate test coverage report
        run: |
          cd apps/mobile/ios
          xcrun xccov view --report --json TestResults.xcresult > coverage.json
          xcrun xccov view TestResults.xcresult

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ios-test-results
          path: apps/mobile/ios/TestResults.xcresult

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/mobile/ios/coverage.json
          flags: ios
          name: ios-coverage

  ui-tests:
    name: UI Tests
    runs-on: macos-14
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

      - name: Cache SPM packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}

      - name: Setup design tokens
        run: |
          cd packages/design-tokens
          npm install
          npm run build:ios

      - name: Copy design tokens to iOS project
        run: |
          cp -r packages/design-tokens/dist/ios/* apps/mobile/ios/HealthCoachAI/Resources/DesignTokens/

      - name: Create iOS env file
        run: |
          cat > apps/mobile/ios/.env << EOF
          API_BASE_URL=https://api-staging.healthcoachai.com
          FEATURE_FLAGS=chat,photo_log
          ENV=staging
          EOF

      - name: Run UI tests
        run: |
          cd apps/mobile/ios
          xcodebuild test \
            -project HealthCoachAI.xcodeproj \
            -scheme HealthCoachAIUITests \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
            -configuration Debug \
            -resultBundlePath UITestResults.xcresult \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      - name: Upload UI test results
        uses: actions/upload-artifact@v4
        with:
          name: ios-ui-test-results
          path: apps/mobile/ios/UITestResults.xcresult

  snapshot-tests:
    name: Snapshot Tests
    runs-on: macos-14
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

      - name: Cache SPM packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}

      - name: Setup design tokens
        run: |
          cd packages/design-tokens
          npm install
          npm run build:ios

      - name: Copy design tokens to iOS project
        run: |
          cp -r packages/design-tokens/dist/ios/* apps/mobile/ios/HealthCoachAI/Resources/DesignTokens/

      - name: Run snapshot tests
        run: |
          cd apps/mobile/ios
          xcodebuild test \
            -project HealthCoachAI.xcodeproj \
            -scheme HealthCoachAISnapshotTests \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
            -configuration Debug \
            -resultBundlePath SnapshotTestResults.xcresult \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      - name: Upload snapshot failures
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-snapshot-failures
          path: apps/mobile/ios/Tests/SnapshotTests/ReferenceImages_64

  security-scan:
    name: Security Scanning
    runs-on: macos-14
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install MobSF CLI
        run: |
          pip3 install mobsf-cli

      - name: Run SAST scan
        run: |
          cd apps/mobile/ios
          mobsf-cli scan --source . --type ios --format json --output security-report.json

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: ios-security-report
          path: apps/mobile/ios/security-report.json

  build-archive:
    name: Build Archive
    runs-on: macos-14
    needs: [lint-and-test, ui-tests, snapshot-tests, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

      - name: Cache SPM packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}

      - name: Setup design tokens
        run: |
          cd packages/design-tokens
          npm install
          npm run build:ios

      - name: Copy design tokens to iOS project
        run: |
          cp -r packages/design-tokens/dist/ios/* apps/mobile/ios/HealthCoachAI/Resources/DesignTokens/

      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}

      - name: Install Provisioning Profile
        uses: apple-actions/download-provisioning-profiles@v2
        with:
          bundle-id: com.healthcoachai.app
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Set environment variables
        run: |
          ENVIRONMENT=$([[ "${{ github.ref }}" == "refs/heads/main" ]] && echo "production" || echo "staging")
          API_BASE_URL=$([[ "$ENVIRONMENT" == "production" ]] && echo "https://api.healthcoachai.com" || echo "https://api-staging.healthcoachai.com")
          
          cat > apps/mobile/ios/.env << EOF
          API_BASE_URL=$API_BASE_URL
          FEATURE_FLAGS=chat,photo_log
          ENV=$ENVIRONMENT
          SENTRY_DSN=${{ secrets.SENTRY_DSN_IOS }}
          EOF

      - name: Increment build number
        run: |
          cd apps/mobile/ios
          BUILD_NUMBER=$(date +%Y%m%d%H%M)
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" HealthCoachAI/Info.plist

      - name: Build archive
        run: |
          cd apps/mobile/ios
          xcodebuild archive \
            -project HealthCoachAI.xcodeproj \
            -scheme HealthCoachAI \
            -configuration Release \
            -archivePath HealthCoachAI.xcarchive \
            -allowProvisioningUpdates

      - name: Export IPA
        run: |
          cd apps/mobile/ios
          xcodebuild -exportArchive \
            -archivePath HealthCoachAI.xcarchive \
            -exportPath export \
            -exportOptionsPlist ExportOptions.plist

      - name: Upload to TestFlight
        if: github.ref == 'refs/heads/develop'
        run: |
          cd apps/mobile/ios
          xcrun altool --upload-app \
            --type ios \
            --file export/HealthCoachAI.ipa \
            --username ${{ secrets.APPSTORE_USERNAME }} \
            --password ${{ secrets.APPSTORE_PASSWORD }}

      - name: Upload to App Store
        if: github.ref == 'refs/heads/main'
        run: |
          cd apps/mobile/ios
          xcrun altool --upload-app \
            --type ios \
            --file export/HealthCoachAI.ipa \
            --username ${{ secrets.APPSTORE_USERNAME }} \
            --password ${{ secrets.APPSTORE_PASSWORD }}

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: apps/mobile/ios/export/HealthCoachAI.ipa

  performance-test:
    name: Performance Testing
    runs-on: macos-14
    needs: build-archive
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

      - name: Run performance tests
        run: |
          cd apps/mobile/ios
          xcodebuild test \
            -project HealthCoachAI.xcodeproj \
            -scheme HealthCoachAIPerformanceTests \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
            -configuration Release \
            -resultBundlePath PerformanceTestResults.xcresult

      - name: Extract performance metrics
        run: |
          cd apps/mobile/ios
          xcrun xcresulttool get --path PerformanceTestResults.xcresult --format json > performance-metrics.json

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: ios-performance-results
          path: |
            apps/mobile/ios/PerformanceTestResults.xcresult
            apps/mobile/ios/performance-metrics.json

  accessibility-test:
    name: Accessibility Testing
    runs-on: macos-14
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

      - name: Setup design tokens
        run: |
          cd packages/design-tokens
          npm install
          npm run build:ios

      - name: Copy design tokens to iOS project
        run: |
          cp -r packages/design-tokens/dist/ios/* apps/mobile/ios/HealthCoachAI/Resources/DesignTokens/

      - name: Run accessibility tests
        run: |
          cd apps/mobile/ios
          xcodebuild test \
            -project HealthCoachAI.xcodeproj \
            -scheme HealthCoachAIAccessibilityTests \
            -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
            -configuration Debug \
            -resultBundlePath AccessibilityTestResults.xcresult

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        with:
          name: ios-accessibility-results
          path: apps/mobile/ios/AccessibilityTestResults.xcresult

  notification:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [build-archive, performance-test, accessibility-test]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#mobile-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow